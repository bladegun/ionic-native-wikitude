var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var WikitudeOriginal = /** @class */ (function (_super) {
    __extends(WikitudeOriginal, _super);
    function WikitudeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WikitudeOriginal.prototype.isDeviceSupported = function (requiredFeatures) { return cordova(this, "isDeviceSupported", { "callbackOrder": "reverse" }, arguments); };
    WikitudeOriginal.prototype.requestAccess = function (requiredFeatures) { return cordova(this, "requestAccess", { "callbackOrder": "reverse" }, arguments); };
    WikitudeOriginal.prototype.loadARchitectWorld = function (architectWorldPath, requiredFeatures, startupConfiguration) { return cordova(this, "loadARchitectWorld", { "callbackOrder": "reverse" }, arguments); };
    WikitudeOriginal.prototype.close = function () { return cordova(this, "close", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.hide = function () { return cordova(this, "hide", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.show = function () { return cordova(this, "show", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.callJavaScript = function (js) { return cordova(this, "callJavaScript", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.setOnUrlInvokeCallback = function (onUrlInvokeCallback) { return cordova(this, "setOnUrlInvokeCallback", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.setJSONObjectReceivedCallback = function (onJSONObjectReceived) { return cordova(this, "setJSONObjectReceivedCallback", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.setLocation = function (latitude, longitude, altitude, accuracy) { return cordova(this, "setLocation", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.captureScreen = function (includeWebView, imagePathInBundleOrNullForPhotoLibrary) { return cordova(this, "captureScreen", { "callbackOrder": "reverse" }, arguments); };
    WikitudeOriginal.prototype.setErrorHandler = function (errorHandler) { return cordova(this, "setErrorHandler", { "sync": true, "platforms": ["iOS"] }, arguments); };
    WikitudeOriginal.prototype.setDeviceSensorsNeedCalibrationHandler = function (startCalibrationHandler) { return cordova(this, "setDeviceSensorsNeedCalibrationHandler", { "sync": true, "platforms": ["iOS"] }, arguments); };
    WikitudeOriginal.prototype.setDeviceSensorsFinishedCalibrationHandler = function (finishedCalibrationHandler) { return cordova(this, "setDeviceSensorsFinishedCalibrationHandler", { "sync": true, "platforms": ["iOS"] }, arguments); };
    WikitudeOriginal.prototype.setBackButtonCallback = function (onBackButtonCallback) { return cordova(this, "setBackButtonCallback", { "sync": true, "platforms": ["Android"] }, arguments); };
    WikitudeOriginal.prototype.getSDKBuildInformation = function () { return cordova(this, "getSDKBuildInformation", { "callbackOrder": "reverse" }, arguments); };
    WikitudeOriginal.prototype.getSDKVersion = function () { return cordova(this, "getSDKVersion", { "callbackOrder": "reverse" }, arguments); };
    WikitudeOriginal.prototype.openAppSettings = function () { return cordova(this, "openAppSettings", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.showAlert = function (alertString) { return cordova(this, "showAlert", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.onResume = function () { return cordova(this, "onResume", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.onBackButton = function () { return cordova(this, "onBackButton", { "sync": true }, arguments); };
    WikitudeOriginal.prototype.onPause = function () { return cordova(this, "onPause", { "sync": true }, arguments); };
    Object.defineProperty(WikitudeOriginal.prototype, "_sdkKey", {
        get: function () { return cordovaPropertyGet(this, "_sdkKey"); },
        set: function (value) { cordovaPropertySet(this, "_sdkKey", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "FeatureGeo", {
        get: function () { return cordovaPropertyGet(this, "FeatureGeo"); },
        set: function (value) { cordovaPropertySet(this, "FeatureGeo", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "FeatureImageTracking", {
        get: function () { return cordovaPropertyGet(this, "FeatureImageTracking"); },
        set: function (value) { cordovaPropertySet(this, "FeatureImageTracking", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "FeatureInstantTracking", {
        get: function () { return cordovaPropertyGet(this, "FeatureInstantTracking"); },
        set: function (value) { cordovaPropertySet(this, "FeatureInstantTracking", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "FeatureObjectTracking", {
        get: function () { return cordovaPropertyGet(this, "FeatureObjectTracking"); },
        set: function (value) { cordovaPropertySet(this, "FeatureObjectTracking", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "CameraPositionUndefined", {
        get: function () { return cordovaPropertyGet(this, "CameraPositionUndefined"); },
        set: function (value) { cordovaPropertySet(this, "CameraPositionUndefined", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "CameraPositionFront", {
        get: function () { return cordovaPropertyGet(this, "CameraPositionFront"); },
        set: function (value) { cordovaPropertySet(this, "CameraPositionFront", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "CameraPositionBack", {
        get: function () { return cordovaPropertyGet(this, "CameraPositionBack"); },
        set: function (value) { cordovaPropertySet(this, "CameraPositionBack", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "CameraFocusRangeNone", {
        get: function () { return cordovaPropertyGet(this, "CameraFocusRangeNone"); },
        set: function (value) { cordovaPropertySet(this, "CameraFocusRangeNone", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "CameraFocusRangeNear", {
        get: function () { return cordovaPropertyGet(this, "CameraFocusRangeNear"); },
        set: function (value) { cordovaPropertySet(this, "CameraFocusRangeNear", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(WikitudeOriginal.prototype, "CameraFocusRangeFar", {
        get: function () { return cordovaPropertyGet(this, "CameraFocusRangeFar"); },
        set: function (value) { cordovaPropertySet(this, "CameraFocusRangeFar", value); },
        enumerable: false,
        configurable: true
    });
    WikitudeOriginal.pluginName = "Wikitude";
    WikitudeOriginal.plugin = "com.wikitude.phonegap.wikitudeplugin";
    WikitudeOriginal.pluginRef = "WikitudePlugin";
    WikitudeOriginal.repo = "https://github.com/Wikitude/wikitude-cordova-plugin";
    WikitudeOriginal.platforms = ["Android", "iOS"];
    return WikitudeOriginal;
}(IonicNativePlugin));
var Wikitude = new WikitudeOriginal();
export { Wikitude };
//# sourceMappingURL=data:application/json;base64,