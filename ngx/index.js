import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
var Wikitude = /** @class */ (function (_super) {
    __extends(Wikitude, _super);
    function Wikitude() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Wikitude.prototype.isDeviceSupported = function (requiredFeatures) { return cordova(this, "isDeviceSupported", { "callbackOrder": "reverse" }, arguments); };
    Wikitude.prototype.requestAccess = function (requiredFeatures) { return cordova(this, "requestAccess", { "callbackOrder": "reverse" }, arguments); };
    Wikitude.prototype.loadARchitectWorld = function (architectWorldPath, requiredFeatures, startupConfiguration) { return cordova(this, "loadARchitectWorld", { "callbackOrder": "reverse" }, arguments); };
    Wikitude.prototype.close = function () { return cordova(this, "close", { "sync": true }, arguments); };
    Wikitude.prototype.hide = function () { return cordova(this, "hide", { "sync": true }, arguments); };
    Wikitude.prototype.show = function () { return cordova(this, "show", { "sync": true }, arguments); };
    Wikitude.prototype.callJavaScript = function (js) { return cordova(this, "callJavaScript", { "sync": true }, arguments); };
    Wikitude.prototype.setOnUrlInvokeCallback = function (onUrlInvokeCallback) { return cordova(this, "setOnUrlInvokeCallback", { "sync": true }, arguments); };
    Wikitude.prototype.setJSONObjectReceivedCallback = function (onJSONObjectReceived) { return cordova(this, "setJSONObjectReceivedCallback", { "sync": true }, arguments); };
    Wikitude.prototype.setLocation = function (latitude, longitude, altitude, accuracy) { return cordova(this, "setLocation", { "sync": true }, arguments); };
    Wikitude.prototype.captureScreen = function (includeWebView, imagePathInBundleOrNullForPhotoLibrary) { return cordova(this, "captureScreen", { "callbackOrder": "reverse" }, arguments); };
    Wikitude.prototype.setErrorHandler = function (errorHandler) { return cordova(this, "setErrorHandler", { "sync": true, "platforms": ["iOS"] }, arguments); };
    Wikitude.prototype.setDeviceSensorsNeedCalibrationHandler = function (startCalibrationHandler) { return cordova(this, "setDeviceSensorsNeedCalibrationHandler", { "sync": true, "platforms": ["iOS"] }, arguments); };
    Wikitude.prototype.setDeviceSensorsFinishedCalibrationHandler = function (finishedCalibrationHandler) { return cordova(this, "setDeviceSensorsFinishedCalibrationHandler", { "sync": true, "platforms": ["iOS"] }, arguments); };
    Wikitude.prototype.setBackButtonCallback = function (onBackButtonCallback) { return cordova(this, "setBackButtonCallback", { "sync": true, "platforms": ["Android"] }, arguments); };
    Wikitude.prototype.getSDKBuildInformation = function () { return cordova(this, "getSDKBuildInformation", { "callbackOrder": "reverse" }, arguments); };
    Wikitude.prototype.getSDKVersion = function () { return cordova(this, "getSDKVersion", { "callbackOrder": "reverse" }, arguments); };
    Wikitude.prototype.openAppSettings = function () { return cordova(this, "openAppSettings", { "sync": true }, arguments); };
    Wikitude.prototype.showAlert = function (alertString) { return cordova(this, "showAlert", { "sync": true }, arguments); };
    Wikitude.prototype.onResume = function () { return cordova(this, "onResume", { "sync": true }, arguments); };
    Wikitude.prototype.onBackButton = function () { return cordova(this, "onBackButton", { "sync": true }, arguments); };
    Wikitude.prototype.onPause = function () { return cordova(this, "onPause", { "sync": true }, arguments); };
    Object.defineProperty(Wikitude.prototype, "_sdkKey", {
        get: function () { return cordovaPropertyGet(this, "_sdkKey"); },
        set: function (value) { cordovaPropertySet(this, "_sdkKey", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "FeatureGeo", {
        get: function () { return cordovaPropertyGet(this, "FeatureGeo"); },
        set: function (value) { cordovaPropertySet(this, "FeatureGeo", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "FeatureImageTracking", {
        get: function () { return cordovaPropertyGet(this, "FeatureImageTracking"); },
        set: function (value) { cordovaPropertySet(this, "FeatureImageTracking", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "FeatureInstantTracking", {
        get: function () { return cordovaPropertyGet(this, "FeatureInstantTracking"); },
        set: function (value) { cordovaPropertySet(this, "FeatureInstantTracking", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "FeatureObjectTracking", {
        get: function () { return cordovaPropertyGet(this, "FeatureObjectTracking"); },
        set: function (value) { cordovaPropertySet(this, "FeatureObjectTracking", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "CameraPositionUndefined", {
        get: function () { return cordovaPropertyGet(this, "CameraPositionUndefined"); },
        set: function (value) { cordovaPropertySet(this, "CameraPositionUndefined", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "CameraPositionFront", {
        get: function () { return cordovaPropertyGet(this, "CameraPositionFront"); },
        set: function (value) { cordovaPropertySet(this, "CameraPositionFront", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "CameraPositionBack", {
        get: function () { return cordovaPropertyGet(this, "CameraPositionBack"); },
        set: function (value) { cordovaPropertySet(this, "CameraPositionBack", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "CameraFocusRangeNone", {
        get: function () { return cordovaPropertyGet(this, "CameraFocusRangeNone"); },
        set: function (value) { cordovaPropertySet(this, "CameraFocusRangeNone", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "CameraFocusRangeNear", {
        get: function () { return cordovaPropertyGet(this, "CameraFocusRangeNear"); },
        set: function (value) { cordovaPropertySet(this, "CameraFocusRangeNear", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Wikitude.prototype, "CameraFocusRangeFar", {
        get: function () { return cordovaPropertyGet(this, "CameraFocusRangeFar"); },
        set: function (value) { cordovaPropertySet(this, "CameraFocusRangeFar", value); },
        enumerable: false,
        configurable: true
    });
    Wikitude.pluginName = "Wikitude";
    Wikitude.plugin = "com.wikitude.phonegap.wikitudeplugin";
    Wikitude.pluginRef = "WikitudePlugin";
    Wikitude.repo = "https://github.com/Wikitude/wikitude-cordova-plugin";
    Wikitude.platforms = ["Android", "iOS"];
    Wikitude.decorators = [
        { type: Injectable }
    ];
    return Wikitude;
}(IonicNativePlugin));
export { Wikitude };
//# sourceMappingURL=data:application/json;base64,